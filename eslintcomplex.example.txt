eslint.complexity.config.js


module.exports = {
  env: {
    browser: true,
    node: true,
    jest: true,
    es6: true,
    mocha: true,
  },
  // extends: ['eslint:recommended', 'plugin:react/recommended', 'prettier'],
  parser: 'babel-eslint',
  plugins: ['react', 'jsx-a11y', 'import', 'prettier'],
  rules: {
    eqeqeq: [0, 'smart'],
    'prefer-const': 0,
    'no-var': 0,
    'prefer-template': 0,
    'no-else-return': 0,
    'consistent-return': 0,
    'no-useless-return': 0,
    'default-case': 0,
    'prettier/prettier': [
      0,
      {
        singleQuote: true,
        trailingComma: 'es5',
      },
    ],
    'react/prop-types': 0,
    'react/display-name': 0,
    'react/no-deprecated': 0,
    'no-console': 0,
    'no-debugger': 0,
    'import/named': 0,
    'import/default': 0,
    'import/namespace': 0,
    'import/newline-after-import': 0,
    'import/first': 0,
    'import/no-unresolved': 0,
    complexity: ['warn', 5],
    'max-statements': ['warn', 7],
    'max-statements-per-line': [
      'warn',
      {
        max: 1,
      },
    ],
    'max-nested-callbacks': ['warn', 2],
    'max-depth': [
      'warn',
      {
        max: 2,
      },
    ],
    'max-lines': ['warn', 100],
  },
};


--------------
eslint.formatter.js


module.exports = function(results) {
  const col = {
    black: '\x1b[30m',
    boldBlack: '\x1b[1;30m',
    red: '\x1b[31m',
    boldRed: '\x1b[1;31m',
    yellow: '\x1b[33m',
    boldYellow: '\x1b[1;33m',
    reset: '\x1b[0m',
  };

  const calculateComplexity = (messages, severity) =>
    messages
      .filter(
        message =>
          message.severity === severity && message.ruleId === 'complexity'
      )
      .map(message => parseInt(message.message.replace(/\D/gi, '')))
      .reduce(
        (total, currentComplexity) => total + Math.ceil(currentComplexity / 4),
        0
      );
  const findMetrics = result => {
    const details = {
      errors: result.errorCount,
      warnings: result.warningCount,
    };
    const complexity = {
      errors: calculateComplexity(result.messages, 2),
      warnings: calculateComplexity(result.messages, 1),
    };
    return {
      errors: details.errors + complexity.errors,
      warnings: details.warnings + complexity.warnings,
    };
  };

  const errorSorter = (a, b) => {
    const metrics = {
      a: findMetrics(a),
      b: findMetrics(b),
    };
    if (metrics.a.errors < metrics.b.errors) {
      return 1;
    }
    if (metrics.a.errors > metrics.b.errors) {
      return -1;
    }
    // and if the error counts match, we sort on warnings
    if (metrics.a.warnings < metrics.b.warnings) {
      return 1;
    }
    if (metrics.a.warnings > metrics.b.warnings) {
      return -1;
    }

    return 0;
  };

  const groupMessages = messages => {
    const grouped = [];
    messages.forEach(message => {
      const report = `${message.severity === 1
        ? col.yellow
        : col.red}Line ${message.line} : ${message.message}`;
      if (message.ruleId in grouped) {
        grouped[message.ruleId].push(report);
      } else {
        grouped[message.ruleId] = [report];
      }
    });
    return grouped;
  };

  const sorted = results.sort(errorSorter);
  // .slice(0, 5);

  const renderHeadline = result => `${col.boldBlack}${result.filePath}
${col.boldBlack}${'='.repeat(result.filePath.length)}
${col.boldRed}errors: ${col.red}${result.errorCount}
${col.boldYellow}warnings: ${col.yellow}${result.warningCount}\n\n`;

  const renderMessage = (errorLabel, messages) => `${col.boldBlack}${errorLabel}
${messages.join('\n')}
${col.reset}\n`;

  let report = '';
  sorted
    .filter(result => result.errorCount > 0 || result.warningCount > 0)
    .map(result => {
      report += renderHeadline(result);
      const groupedMessages = groupMessages(result.messages);
      Object.keys(groupedMessages).forEach(key => {
        report += renderMessage(key, groupedMessages[key]);
      });
    });

  return report;
};





--------
package json script

"lint:complex:html":
      "eslint . -c eslint.complexity.config.js -f html -o complexity.html && open -n complexity.html",
    "lint:complex:sorted":
      "eslint . -c eslint.complexity.config.js -f ./eslint.formatter.js"